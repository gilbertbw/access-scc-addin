Option Compare Database
Option Explicit

Public Enum SccSystem
  sccSystemSubversion = 1  ' Supported

  ' The Text implementation works generically
  ' with GIT (or any SCC system) but does not integrate fully, ie. specific
  ' git functions (commit, push, etc) have to be performed manuallyby the user
  sccSystemText = 4        ' Supported
  
  ' These are placeholders for future possible enhanced support
  ' for specific SCC systems
  sccSystemGIT = 2         ' Unsupported
  sccSystemMercurial = 3   ' Unsupported
End Enum

Private msccSystem As SccSystem ' the scc system being used

Public arrExtras() As SVNITEM
Public arrForms() As SVNITEM
Public arrIMEXSpecs() As SVNITEM
Public arrMacros() As SVNITEM
Public arrModules() As SVNITEM
Public arrQueries() As SVNITEM
Public arrReferences() As SVNITEM
Public arrReports() As SVNITEM
Public arrTables() As SVNITEM
Public arrToolbars() As SVNITEM

Public Sub SetSCCSystem(System As SccSystem)
  msccSystem = System
End Sub

Public Function GetSCCSystem() As SccSystem
  If msccSystem = 0 Then
    GetSCCSystem = sccSystemSubversion ' default
  Else
    GetSCCSystem = msccSystem
  End If
End Function

'************************************************
' Gets the latest version identifier stored in an SCC repository
'
' This is a wrapper to get the latest version identifier of code
' from an SCC repository.
'
' Version history:
'   - 1.00 initial version 25/05/2012
'
' @version    1.00
' @param      String the base path of a checked out SCC object to use when getting the version
' @return     String the latest SCC version of the object in the repository
'************************************************
Public Function SCC_GetLatestVersion(strPath As String) As String

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SCC_GetLatestVersion = SVN_GetLatestVersion(strPath)
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    Case sccSystemText
      SCC_GetLatestVersion = TEXT_GetLatestVersion(strPath)
  End Select

End Function

'************************************************
' Gets the Mapped SCC URL for a working copy folder
'
' This is a wrapper to get the mapped URL for a checked out
' working copy folder for an SCC repository
'
' Version history:
'   - 1.00 initial version 25/05/2012
'
' @version    1.00
' @param      String the base path of a checked out SCC object
' @return     String the SCC URL mapped to the folder
'************************************************
Public Function SCC_GetMappedUrl(strPath As String) As String

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SCC_GetMappedUrl = SVN_GetMappedUrl(strPath)
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      SCC_GetMappedUrl = TEXT_GetMappedUrl(strPath)
  
  End Select

End Function

'************************************************
' Gets the latest SCC revision for the working folder
'
' This is a wrapper to get the latest SCC revision of
' the working folder. The repository may be at a later version.
'
' Version history:
'   - 1.00 initial version 25/05/2012
'
' @version    1.01
' @param      String the base path of a checked out SCC object
' @return     String the latest working copy revision
'************************************************
Public Function SCC_GetWorkingFolderVersion(strPath As String) As String

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SCC_GetWorkingFolderVersion = SVN_GetWorkingFolderVersion(strPath)
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      SCC_GetWorkingFolderVersion = TEXT_GetWorkingFolderVersion(strPath)
  
  End Select

End Function

'************************************************
' Fills an array with all checked out objects from an SCC rfolder
'
' This is a wrapper to the underlying SCC functions
'
' Version history:
'   - 1.00 initial version 25/05/2012
'
' @version    1.00
' @param      String the base path of a checked out SCC folder
' @param      Array list of objects as SVNITEMs
'************************************************
Public Sub SCC_GetAllVersionsSubFolder(strPath As String, ByRef arrFill() As SVNITEM)

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SVN_GetAllVersionsSubFolder strPath, arrFill
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      TEXT_GetAllVersionsSubFolder strPath, arrFill
  End Select

End Sub

'************************************************
' Fills all arrays with all checked out objects from all SCC folders
'
' Version history:
'   - 1.00 initial version 25/05/2012
'
' @version    1.00
' @param      String the base path of a checked out SCC folder
'************************************************
Public Sub SCC_GetAllVersions(strPath As String)
  
  Select Case GetSCCSystem
    Case sccSystemSubversion
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\Extras", arrExtras
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\Forms", arrForms
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\Macros", arrMacros
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\Modules", arrModules
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\Queries", arrQueries
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\References", arrReferences
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\Reports", arrReports
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\Tables", arrTables
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\Toolbars", arrToolbars
      SVN_GetAllVersionsSubFolder stripSlash(strPath) & "\IMEXSpecs", arrIMEXSpecs
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\Extras", arrExtras
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\Forms", arrForms
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\Macros", arrMacros
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\Modules", arrModules
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\Queries", arrQueries
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\References", arrReferences
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\Reports", arrReports
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\Tables", arrTables
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\Toolbars", arrToolbars
      TEXT_GetAllVersionsSubFolder stripSlash(strPath) & "\IMEXSpecs", arrIMEXSpecs
  
  End Select

End Sub

'************************************************
' SCC Get Status
'
' Gathers the current status of the working copy file
' It returns "M" modified or "N" normal
' It could be extended in the future according to the getstatus definition
'
' Version history:
'   - 1.00 initial version 25/05/2012
'
' @version    1.00
' @param      String the path of the checked out file
' @return     String status of the working copy file
'************************************************
Public Function SCC_GetStatus(strPath As String) As String

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SCC_GetStatus = SVN_GetStatus(strPath)
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      SCC_GetStatus = TEXT_GetStatus(strPath)
  
  End Select

End Function

'************************************************
' SCC Get Info
'
' Gathers information about a working copy file checked out from SCC
'
' Version history:
'  - 1.00 initial version
'
' @version    1.00
' @param      String the path of the checked out file
' @return     SVNITEM details of the checked out file
'************************************************
Public Function SCC_GetInfo(strPath As String) As SVNITEM

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SCC_GetInfo = SVN_GetInfo(strPath)
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      SCC_GetInfo = TEXT_GetInfo(strPath)
  
  End Select

End Function

'************************************************
' Gets the currently checked out version of an SCC repository
'
' Version history:
'   - 1.00 initial version
'
' @version    1.00
' @param      String the base path to use when getting the SCC version
' @return     String the current SCC version of the code
'************************************************
Public Function SCC_GetVersion(strPath As String) As String

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SCC_GetVersion = SVN_GetVersion(strPath)
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      SCC_GetVersion = TEXT_GetVersion(strPath)
  
  End Select

End Function

'************************************************
' Determines if the installed SCC client is supported
'
' Version history:
'   - 1.00 initial version
'   - 1.01 updated to handle internationalised number formats such as in Germany [SF] 29/11/2012
'   - 1.02 updated to handle version 1.8 of SVN [SF] 02/10/2013
'   - 1.03 updated to handle version 1.9 of SVN [SF] 29/09/2015
'
' @version    1.03
' @return     Boolean True if supported, False if not
'************************************************
Public Function SCC_IsSupportedClient() As Boolean
  Dim sngVersion As Single
  
  Select Case GetSCCSystem
    Case sccSystemSubversion
      sngVersion = Val(SVN_ClientVersion(True)) ' Use Val rather than CSng as SVN does not return an internationally formatted version number, it always uses . as the decimal separator
      Select Case sngVersion
        Case Is <= 1.9
          SCC_IsSupportedClient = True
        
        Case Else
          MsgBox "The installed command line SVN client is not supported!" & vbCrLf & vbCrLf & _
                 " Installed version: " & sngVersion & vbCrLf & _
                 " Latest supported version: 1.9", vbCritical + vbOKOnly, "Unsupported Client Version"
          SCC_IsSupportedClient = False
      
      End Select
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      SCC_IsSupportedClient = True
  
  End Select

End Function

'************************************************
' Triggers an SCC delete
'
' This sub triggers a delete of the specified file
' from the repository
'
' Version history:
'   - 1.00 initial version
'
' @version    1.00
' @param      String the base path to perform an SCC delete against
'************************************************
Public Function SCC_Delete_File(strPath As String)

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SCC_Delete_File = SVN_Delete_File(strPath)
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      SCC_Delete_File = TEXT_Delete_File(strPath)
  
  End Select

End Function

'************************************************
' Triggers an SCC add file
'
' This sub triggers an add of the specified file
' to the repository
'
' Version history:
'   - 1.00 initial version
'
' @version    1.00
' @param      String the base path to perform an SCC add against
'************************************************
Public Function SCC_Add_File(strPath As String)

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SCC_Add_File = SVN_Add_File(strPath)
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      SCC_Add_File = TEXT_Add_File(strPath)
  
      
  End Select

End Function

'************************************************
' Triggers an SCC commit using a GUI Client
'
' This sub triggers the GUI client to perform a commit
' on the path specified.
'
' Version history:
'   - 1.00 initial version
'   - 1.01 updated to pass preference to close or not close the commit screen [SF] 04/09/2012
'
' @version    1.01
' @param      String the base path to perform an SCC commit against
'************************************************
Public Sub SCC_Commit(strPath As String, blnShowCommit As Boolean)

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SVN_Commit strPath, blnShowCommit
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      TEXT_Commit strPath, blnShowCommit
  
  End Select

End Sub

'************************************************
' Triggers an SCC update using the GUI client
'
' This sub triggers a GUI client to perform an SCC update
' on the path specified.
'
' Version history:
'   - 1.00 initial version
'   - 1.01 updated to pass preference to close or not close the update screen [SF] 04/09/2012
'
' @version    1.01
' @param      String the base path to perform an SCC update against
'************************************************
Public Sub SCC_Update(strPath As String, blnShowUpdates As Boolean)
  
  Select Case GetSCCSystem
    Case sccSystemSubversion
      SVN_Update strPath, blnShowUpdates
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      TEXT_Update strPath, blnShowUpdates
  
  End Select

End Sub

'************************************************
' SCC_GetLatestImportVersion
'
' Gets the version of the newest object imported into
' access from the tool.
'
' Version history:
' - 1.00 initial version 04/09/2012
' - 1.01 abstracted out as this is determined in an SCC dependant way [GBW] 06/02/2020
'
' @author Steve Falla <steve.falla@talkjcs.com>
' @suggestions
' @version 1.00
' @return Variant Latest Revision Number
'************************************************
Public Function SCC_GetLatestImportVersion() As String

  Select Case GetSCCSystem
    Case sccSystemSubversion
      SCC_GetLatestImportVersion = SVN_GetLatestImportVersion
    
    Case sccSystemGIT
    
    Case sccSystemMercurial
    
    Case sccSystemText
      SCC_GetLatestImportVersion = TEXT_GetLatestImportVersion
  
  End Select

End Function